[{"/workspace/Texter/client/src/index.js":"1","/workspace/Texter/client/src/App.jsx":"2","/workspace/Texter/client/src/components/index.js":"3","/workspace/Texter/client/src/components/ChannelListContainer.jsx":"4","/workspace/Texter/client/src/components/ChannelSearch.jsx":"5","/workspace/Texter/client/src/components/ChannelContainer.jsx":"6","/workspace/Texter/client/src/assets/index.js":"7","/workspace/Texter/client/src/assets/AddChannel.js":"8","/workspace/Texter/client/src/assets/ChannelInfo.js":"9","/workspace/Texter/client/src/assets/InviteIcon.js":"10","/workspace/Texter/client/src/assets/CloseCreateChannel.js":"11","/workspace/Texter/client/src/assets/LightningBolt.js":"12","/workspace/Texter/client/src/assets/SearchIcon.js":"13","/workspace/Texter/client/src/components/TeamChannelList.jsx":"14","/workspace/Texter/client/src/components/TeamChannelPreview.jsx":"15","/workspace/Texter/client/src/components/Auth.jsx":"16"},{"size":149,"mtime":1648350931325,"results":"17","hashOfConfig":"18"},{"size":691,"mtime":1648355617388,"results":"19","hashOfConfig":"18"},{"size":369,"mtime":1648355660362,"results":"20","hashOfConfig":"18"},{"size":2264,"mtime":1648355359064,"results":"21","hashOfConfig":"18"},{"size":1094,"mtime":1648350931325,"results":"22","hashOfConfig":"18"},{"size":141,"mtime":1648350931325,"results":"23","hashOfConfig":"18"},{"size":281,"mtime":1648350931325,"results":"24","hashOfConfig":"18"},{"size":725,"mtime":1648350931325,"results":"25","hashOfConfig":"18"},{"size":757,"mtime":1648350931325,"results":"26","hashOfConfig":"18"},{"size":1093,"mtime":1648350931325,"results":"27","hashOfConfig":"18"},{"size":826,"mtime":1648350931325,"results":"28","hashOfConfig":"18"},{"size":521,"mtime":1648350931325,"results":"29","hashOfConfig":"18"},{"size":468,"mtime":1648350931325,"results":"30","hashOfConfig":"18"},{"size":1079,"mtime":1648354157029,"results":"31","hashOfConfig":"18"},{"size":1207,"mtime":1648355391618,"results":"32","hashOfConfig":"18"},{"size":5132,"mtime":1648358145068,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"caziw",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"37"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"37"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/workspace/Texter/client/src/index.js",[],[],["88","89"],"/workspace/Texter/client/src/App.jsx",["90"],[],"import React from 'react';\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react';\nimport Cookies from 'universal-cookie';\n\nimport { ChannelContainer, ChannelListContainer, Auth } from './components';\n\nimport './App.css';\n\nconst apiKey = '2zb84fz5csfc';\n\nconst client = StreamChat.getInstance(apiKey);\n\nconst authToken = false;\n\n\nconst App = () => {\n\n  if(!authToken) return <Auth />\n\n  return (\n    <div className='app__wrapper'>\n        <Chat client={client} theme='team light'>\n            <ChannelListContainer \n            \n            />\n            <ChannelContainer \n            \n            />\n        </Chat>\n    </div>\n  )\n}\n\nexport default App\n//32:56","/workspace/Texter/client/src/components/index.js",[],[],"/workspace/Texter/client/src/components/ChannelListContainer.jsx",["91","92"],[],"import React from 'react';\nimport { ChannelList, useChatContext } from 'stream-chat-react';\nimport { ChannelSearch, TeamChannelList, TeamChannelPreview } from './';\n\n\nimport Cookies from 'universal-cookie';\nimport HospitalIcon from '../assets/hospital.png'; /*TODO: Change Icon */\nimport LogoutIcon from '../assets/logout.png'\n\n\nconst SideBar = () => (\n    <div className='channel-list__sidebar'>\n        <div className='channel-list__sidebar__icon1'>\n            <div className='icon1__inner'>\n                <img src={HospitalIcon} alt=\"Icon\" width='30' />\n            </div>\n        </div>\n        <div className='channel-list__sidebar__icon2'>\n            <div className='icon1__inner'>\n                <img src={LogoutIcon} alt=\"Log out\" width='30' />\n            </div>\n        </div>\n    </div>\n)\n\nconst CompanyHeader = () => (\n    <div className='channel-list__header'>\n        <p className='channel-list__header__text'>Texter</p>\n    </div>\n)\n\nconst ChannelListContainer = () => {\n  return (\n    <>\n        <SideBar />\n        <div className='channel-list__list__wrapper'>\n            <CompanyHeader />\n            <ChannelSearch />\n            <ChannelList \n                filters={{}}\n                channelRenderFilterFn={() => {}}\n                List={(listProps) => (\n                    <TeamChannelList \n                        { ... listProps}\n                        type='team'\n                    />\n                )}\n                Preview={(PreviewProps) => (\n                    <TeamChannelPreview \n                        { ... PreviewProps}\n                        type='team'\n                    />\n                )}\n            />\n            <ChannelList \n                filters={{}}\n                channelRenderFilterFn={() => {}}\n                List={(listProps) => (\n                    <TeamChannelList \n                        { ... listProps}\n                        type='messaging'\n                    />\n                )}\n                Preview={(PreviewProps) => (\n                    <TeamChannelPreview \n                        { ... PreviewProps}\n                        type='messaging'\n                    />\n                )}\n            />\n        </div>\n    </>\n  )\n}\n\nexport default ChannelListContainer","/workspace/Texter/client/src/components/ChannelSearch.jsx",["93","94","95","96"],[],"import React, { useState, useEffect } from 'react';\nimport { getChannel, useChatCOntext } from 'stream-chat-react';\n\nimport { SearchIcon } from '../assets'\n\nconst ChannelSearch = () => {\n    const[query, setQuery] = useState('');\n    const[loading, setLoading] = useState(false);\n\n    const getChannels = async (text) => {\n        try{\n            // TODO: fetch channels\n        } catch (error) {\n            setQuery('')\n        }\n    }\n\n    const onSearch=(event) => {\n        event.preventDefault();\n\n        setLoading(true);\n        setQuery(event.target.value);\n        getChannels(event.target.value);\n    }\n\n  return (\n    <div className='channel-search__container'>\n        <div className='channel-search__input__wrapper'>\n            <div className='channel-search__input__icon'>\n                <SearchIcon />\n            </div>\n            <input \n            className='channel-search__input__text' \n            placeholder='Search' \n            type='text' \n            value={query}\n            onChange={onSearch}/>\n        </div>\n    </div>\n  )\n}\n\nexport default ChannelSearch","/workspace/Texter/client/src/components/ChannelContainer.jsx",[],[],"/workspace/Texter/client/src/assets/index.js",[],[],"/workspace/Texter/client/src/assets/AddChannel.js",[],[],"/workspace/Texter/client/src/assets/ChannelInfo.js",[],[],"/workspace/Texter/client/src/assets/InviteIcon.js",[],[],"/workspace/Texter/client/src/assets/CloseCreateChannel.js",[],[],"/workspace/Texter/client/src/assets/LightningBolt.js",[],[],"/workspace/Texter/client/src/assets/SearchIcon.js",[],[],"/workspace/Texter/client/src/components/TeamChannelList.jsx",["97"],[],"import React from 'react';\n\nimport { AddChannel } from '../assets'\n\nconst TeamChannelList = ({children, error=false, loading, type}) => {\n    if(error){\n        return type === 'team' ? (\n            <div className='team-channel-list'>\n                <p className='team-channel-list__message'>\n                    Connection error, please wait a moment and try again.\n                </p>\n            </div>\n        ) : null\n    } if (loading) {\n        return(\n            <div className='team-channel-list'>\n                <p className='team-channel-list__message loading'>\n                    {type=== 'team' ? 'Channels' : 'Messages'} loading ...\n                </p>\n            </div>\n        )\n    } \n  return (\n    <div className='team-channel-list'>\n        <div className='team-channel-list__header'>\n            <p className='team-channel-list__header__title'>\n                {type=== 'team' ? 'Channels' : 'Direct Messages'}\n            </p>\n            {/*Button - add channel */}\n        </div>\n        {children}\n    </div>\n  )\n}\n\nexport default TeamChannelList","/workspace/Texter/client/src/components/TeamChannelPreview.jsx",["98"],[],"import React from 'react'\nimport { Avatar, Channel, useChatContext } from 'stream-chat-react';\n\nconst TeamChannelPreview = ({channel, type}) => {\n    const { channel: activeChannel, client } = useChatContext();\n\n    const ChannelPreview = () => (\n        <p className='channel-preview__item'>\n            # {channel.data?.name || channel?.data?.id}\n        </p>\n    );\n\n\n\n    const DirectPriview = () => {\n        const members = Object.values(channel.state.members).filter(({ user }) => user.id !== client.userID);\n\n        return (\n            <div className='channel-preview__item single'>\n                <Avatar\n                    image={members[0]?.user?.image}\n                    name={members[0]?.user?.fullName} \n                    size={24}\n                />\n                <p>{members[0]?.user?.fullName}</p>\n            </div>\n        )\n    }\n\n  return (\n    <div className={\n        channel?.id === activeChannel?.id\n        ? 'channel-preview__wrapper__selected'\n        : 'channel-pewview__wrapper'\n    }\n    onClick= {() => {\n        console.log(channel);\n    }}\n    >\n        {type ==='team' ? <ChannelPreview /> : <DirectPriview />}\n    </div>\n  )\n}\n\nexport default TeamChannelPreview","/workspace/Texter/client/src/components/Auth.jsx",["99","100"],[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":4,"column":8,"nodeType":"107","messageId":"108","endLine":4,"endColumn":15},{"ruleId":"105","severity":1,"message":"109","line":2,"column":23,"nodeType":"107","messageId":"108","endLine":2,"endColumn":37},{"ruleId":"105","severity":1,"message":"106","line":6,"column":8,"nodeType":"107","messageId":"108","endLine":6,"endColumn":15},{"ruleId":"105","severity":1,"message":"110","line":1,"column":27,"nodeType":"107","messageId":"108","endLine":1,"endColumn":36},{"ruleId":"105","severity":1,"message":"111","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":20},{"ruleId":"105","severity":1,"message":"112","line":2,"column":22,"nodeType":"107","messageId":"108","endLine":2,"endColumn":36},{"ruleId":"105","severity":1,"message":"113","line":8,"column":11,"nodeType":"107","messageId":"108","endLine":8,"endColumn":18},{"ruleId":"105","severity":1,"message":"114","line":3,"column":10,"nodeType":"107","messageId":"108","endLine":3,"endColumn":20},{"ruleId":"105","severity":1,"message":"115","line":2,"column":18,"nodeType":"107","messageId":"108","endLine":2,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":15},{"ruleId":"105","severity":1,"message":"116","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":13},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'Cookies' is defined but never used.","Identifier","unusedVar","'useChatContext' is defined but never used.","'useEffect' is defined but never used.","'getChannel' is defined but never used.","'useChatCOntext' is defined but never used.","'loading' is assigned a value but never used.","'AddChannel' is defined but never used.","'Channel' is defined but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation"]