{"ast":null,"code":"var _jsxFileName = \"/workspace/Texter/client/src/components/ChannelSearch.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { getChannel, useChatCOntext } from 'stream-chat-react';\nimport { SearchIcon } from '../assets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChannelSearch = () => {\n  _s();\n\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const getChannels = async text => {\n    try {// TODO: fetch channels\n    } catch (error) {\n      setQuery('');\n    }\n  };\n\n  const onSearch = event => {\n    event.preventDefault();\n    setLoading(true);\n    setQuery(event.target.value);\n    getChannels(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-search__container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-search__input__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-search__input__icon\",\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"channel-search__input__text\",\n        placeholder: \"Search\",\n        type: \"text\",\n        value: query,\n        onChange: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChannelSearch, \"Bi0Erny5dq8gq5MgJUQTU8SsPe8=\");\n\n_c = ChannelSearch;\nexport default ChannelSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelSearch\");","map":{"version":3,"sources":["/workspace/Texter/client/src/components/ChannelSearch.jsx"],"names":["React","useState","useEffect","getChannel","useChatCOntext","SearchIcon","ChannelSearch","query","setQuery","loading","setLoading","getChannels","text","error","onSearch","event","preventDefault","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,mBAA3C;AAEA,SAASC,UAAT,QAA2B,WAA3B;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAK,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAK,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAArC;;AAEA,QAAMU,WAAW,GAAG,MAAOC,IAAP,IAAgB;AAChC,QAAG,CACC;AACH,KAFD,CAEE,OAAOC,KAAP,EAAc;AACZL,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH;AACJ,GAND;;AAQA,QAAMM,QAAQ,GAAEC,KAAD,IAAW;AACtBA,IAAAA,KAAK,CAACC,cAAN;AAEAN,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,QAAQ,CAACO,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAR;AACAP,IAAAA,WAAW,CAACI,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAX;AACH,GAND;;AAQF,sBACE;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA,+BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AACA,QAAA,SAAS,EAAC,6BADV;AAEA,QAAA,WAAW,EAAC,QAFZ;AAGA,QAAA,IAAI,EAAC,MAHL;AAIA,QAAA,KAAK,EAAEX,KAJP;AAKA,QAAA,QAAQ,EAAEO;AALV;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAnCD;;GAAMR,a;;KAAAA,a;AAqCN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getChannel, useChatCOntext } from 'stream-chat-react';\n\nimport { SearchIcon } from '../assets'\n\nconst ChannelSearch = () => {\n    const[query, setQuery] = useState('');\n    const[loading, setLoading] = useState(false);\n\n    const getChannels = async (text) => {\n        try{\n            // TODO: fetch channels\n        } catch (error) {\n            setQuery('')\n        }\n    }\n\n    const onSearch=(event) => {\n        event.preventDefault();\n\n        setLoading(true);\n        setQuery(event.target.value);\n        getChannels(event.target.value);\n    }\n\n  return (\n    <div className='channel-search__container'>\n        <div className='channel-search__input__wrapper'>\n            <div className='channel-search__input__icon'>\n                <SearchIcon />\n            </div>\n            <input \n            className='channel-search__input__text' \n            placeholder='Search' \n            type='text' \n            value={query}\n            onChange={onSearch}/>\n        </div>\n    </div>\n  )\n}\n\nexport default ChannelSearch"]},"metadata":{},"sourceType":"module"}